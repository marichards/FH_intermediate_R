str(tbl.keep)
lasso.solver.lenient  <- LassoSolver(mtx.assay = mtx.voom,
targetGene = "MEF2C",
candidateRegulators = tfs$tfs,
lambda = 0.05
)
tbl.lenient <- run(lasso.solver.lenient)
str(tbl.lenient)
ensemble.solver <- EnsembleSolver(mtx.assay = mtx.voom,
targetGene = "MEF2C",
candidateRegulators = tfs$tfs)
tbl.out <- run(ensemble.solver)
str(tbl.out)
ensemble.solver <- EnsembleSolver(mtx.assay = mtx.voom,
targetGene = "MEF2C",
candidateRegulators = tfs$tfs)
tbl.out <- run(ensemble.solver)
tbl.out
ensemble.full <- EnsembleSolver(mtx.assay = mtx.voom,
targetGene = "MEF2C",
candidateRegulators = tfs$tfs,
solverNames = c("lasso","pearson","randomforest","ridge")
)
tbl.full <- run(ensemble.full)
str(tbl.full)
ensemble.full <- EnsembleSolver(mtx.assay = mtx.voom,
targetGene = "MEF2C",
candidateRegulators = tfs$tfs,
solverNames = c("lasso","pearson","randomforest","ridge"),
geneCutoff = 1
)
tbl.full <- run(ensemble.full)
str(tbl.full)
?dplyr::filter
?BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38
?org.Hs.eg.db::org.Hs.eg.db
library(org.Hs.eg.db)
dim(org.Hs.eg.db)
length(org.Hs.eg.db)
class(org.Hs.eg.db)
head(org.Hs.eg.db)
org.Hs.eg.db
select(org.Hs.eg.db, keys = "GO:0010467", keytype = "GO", columns = c("SYMBOL", "GO"))$SYMBOL
?`select,OrgDb-method`
select(org.Hs.eg.db::org.Hs.eg.db, keys = "GO:0010467", keytype = "GO", columns = c("SYMBOL", "GO"))$SYMBOL
SNPlocs.Hsapiens.dbSNP144.GRCh38
library(SNPlocs.Hsapiens.dbSNP144.GRCh38)
SNPlocs.Hsapiens.dbSNP144.GRCh38::SNPlocs.Hsapiens.dbSNP144.GRCh38
?snpsById
?IUPAC_CODE_MAP
?reverseComplement
?maxScore
?IUPAC_CODE_MAP
?read.table
?select
library(org.Hs.eg.db)
?select
?IRanges
IRanges::IRanges()
library(trena)
?getAssayData
library(trena)
?getAssayData
?Solver
?lm
?getSeq
?tbl
?dplyr::tbl
?src_postgres
?dplyr::src_postgres
?read.delim
?read_delim
library(MotifDb)
jaspar <- subset(MotifDb, dataSource == "jaspar2016")
head(jaspar)
names(values(MotifDb))
table(values(jaspar)$tfFamily)
df <- data_frame(x = 1:5,y=letters[1:5],z=rep(0,5))
library(dplyr)
df <- data_frame(x = 1:5,y=letters[1:5],z=rep(0,5))
df
df[,apply(df,2,function(x) !all(x==0))]
?union_all
df
df1
df1 <- data_frame(x = 1:5,y=1:5)
df2 <- data_frame(x = sample(1:5),y = rep(1,5))
df2
union(df1,df2)
class(union(df1,df2))
?findOverlaps
?bind_rows
library(ggpubr)
?ggscatter
blah <- data_frame(x = 1:20, F1 = rep(2,20), F2 = rep(3,20))
blah
melt(blah)
library(reshape2)
melt(blah)
?melt
melt(blah, id.vars = c("F1","F2"))
melt(blah, id.vars = "x")
melt(blah, id.vars = "x", measure.vars = "Prob")
melt(blah, id.vars = "x", measure.vars = c("F1","F2"))
melt(blah, id.vars = "x", measure.vars = c("F1","F2"), variable.name = "Prob")
melt(blah, id.vars = "x", measure.vars = c("F1","F2"), variable.name = "Method")
melt(blah, id.vars = "x", measure.vars = c("F1","F2"), variable.name = "Method", value.name = "Prob")
df
df1
df2
df <- data_frame(X = rep(1,5), y = c(1,2,3,1,2))
df
unique(df)
?ggscatter
blah <- 123456789
blah
?format
format(blah, big.mark = ",")
?sign
?`signif
''
``
`
?signif
?bind_rows
character(0)
blah <- character(0)
c(blah, "one", "two")
library(RUnit)
?checkException
all.tfs <- character(0)
new.tfs <- c("One","Two","Three")
union(all.tfs, new.tfs)
paste0("chrom",sample(c(1:22,"X","Y"),10))
paste0("chr",sample(c(1:22,"X","Y"),10))
fake.data <- list()
for(i = 1:26){ num.points <- sample(100:2000); fake.data[[i]] <- rnorm(num.points)}
for(i in 1:26){ num.points <- sample(100:2000); fake.data[[i]] <- rnorm(num.points)}
sapply(fake.data, length)
sample(100:2000)
sapply(fake.data, length)
head(fake.data[[1]])
str(fake.data)
blah <- rnorm(1000)
length(blah)
blah <- rnorm(1001)
length(blah)
head(fake.data[[1]])
head(fake.data[[2]])
for(i in 1:26){ num.points <- sample(100:2000); fake.data[[i]] <- rnorm(num.points)}
sapply(fake.data, length)
sample(100:2000)
?sample
for(i in 1:26){ num.points <- sample(100:2000,1); fake.data[[i]] <- rnorm(num.points)}
str(fake.data)
for(i in 1:1000){ num.points <- sample(100:2000,1); fake.data[[i]] <- rnorm(num.points)}
str(fake.data)
saveRDS(fake.data, file = "~/Documents/Github/FH_intermediate_R/Datasets/fake.data.RDS")
library(trena)
?FootprintFilter
knitr::opts_chunk$set(echo = TRUE)
# Sp
db.address <- system.file(package="trena", "extdata")
genome.db.uri <- paste("sqlite:/",db.address,"genome.sub.db", sep = "/")
project.db.uri <- paste("sqlite:/",db.address,"project.sub.db", sep = "/")
# Create the specs for the gene region and retrieve it
target.gene <- "MEF2C"
size.upstream <- 1000
size.downstream <- 1000
trena <- Trena("hg38")
gene.regions <- getProximalPromoter(trena, target.gene, size.upstream, size.downstream)
# Create a filter using the geneCenteredSpec option
footprint.filter <- FootprintFilter(genomeDB = genome.db.uri, footprintDB = project.db.uri,
regions = gene.regions)
# Run the getCandidates method
tfs <- getCandidates(footprint.filter)
str(tfs)
# Sp
db.address <- system.file(package="trena", "extdata")
genome.db.uri <- paste("sqlite:/",db.address,"genome.sub.db", sep = "/")
project.db.uri <- paste("sqlite:/",db.address,"project.sub.db", sep = "/")
# Create the specs for the gene region and retrieve it
target.gene <- "MEF2C"
size.upstream <- 1000
size.downstream <- 1000
trena <- Trena("hg38")
gene.regions <- getProximalPromoter(trena, target.gene, size.upstream, size.downstream)
# Create a filter using the geneCenteredSpec option
footprint.filter <- FootprintFilter(genomeDB = genome.db.uri, footprintDB = project.db.uri,
regions = gene.regions)
# Run the getCandidates method
fp <- getCandidates(footprint.filter)
str(fp)
# Sp
db.address <- system.file(package="trena", "extdata")
genome.db.uri <- paste("sqlite:/",db.address,"genome.sub.db", sep = "/")
project.db.uri <- paste("sqlite:/",db.address,"project.sub.db", sep = "/")
# Create the specs for the gene region and retrieve it
target.gene <- "MEF2C"
size.upstream <- 1000
size.downstream <- 1000
trena <- Trena("hg38")
gene.regions <- getProximalPromoter(trena, target.gene, size.upstream, size.downstream)
# Create a filter using the geneCenteredSpec option
footprint.filter <- FootprintFilter(genomeDB = genome.db.uri, footprintDB = project.db.uri,
regions = gene.regions)
# Run the getCandidates method
tbl <- getCandidates(footprint.filter)
str(tbl)
library(MotifDb)
tbl.tfs <- associateTranscriptionFactors(MotifDb, tbl, source="MotifDb", expand.rows=TRUE)
library(MotifDb)
names(tbl)[8] <- "motifName"
tbl.tfs <- associateTranscriptionFactors(MotifDb, tbl, source="MotifDb", expand.rows=TRUE)
str(tbl.tfs)
str(tbl.tfs)
names(tbl.tfs)
names(tbl)
which(names(tbl) == "motifName")
library(trena)
knitr::opts_chunk$set(echo = TRUE)
# Sp
db.address <- system.file(package="trena", "extdata")
genome.db.uri <- paste("sqlite:/",db.address,"genome.sub.db", sep = "/")
project.db.uri <- paste("sqlite:/",db.address,"project.sub.db", sep = "/")
# Create the specs for the gene region and retrieve it
target.gene <- "MEF2C"
size.upstream <- 1000
size.downstream <- 1000
trena <- Trena("hg38")
gene.regions <- getProximalPromoter(trena, target.gene, size.upstream, size.downstream)
# Create a filter using the geneCenteredSpec option
footprint.filter <- FootprintFilter(genomeDB = genome.db.uri, footprintDB = project.db.uri,
regions = gene.regions)
# Run the getCandidates method
tbl <- getCandidates(footprint.filter)
knitr::opts_chunk$set(echo = TRUE)
library(trena)
# Sp
db.address <- system.file(package="trena", "extdata")
genome.db.uri <- paste("sqlite:/",db.address,"genome.sub.db", sep = "/")
project.db.uri <- paste("sqlite:/",db.address,"project.sub.db", sep = "/")
# Create the specs for the gene region and retrieve it
target.gene <- "MEF2C"
size.upstream <- 1000
size.downstream <- 1000
trena <- Trena("hg38")
gene.regions <- getProximalPromoter(trena, target.gene, size.upstream, size.downstream)
# Create a filter using the geneCenteredSpec option
footprint.filter <- FootprintFilter(genomeDB = genome.db.uri, footprintDB = project.db.uri,
regions = gene.regions)
# Run the getCandidates method
tbl <- getCandidates(footprint.filter)
str(tbl)
seeds <- paste0("seed",1:3)
seeds
df <- data.frame(x = seeds, y = 1:3)
df
seeds <- paste("seed",1:3, sep = ".")
df
df <- data.frame(x = seeds, y = 1:3)
df
library(dplyr)
library(tidyr)
mutate(df, new.col = str_split(x, "\\."))
library(stringr)
mutate(df, new.col = str_split(x, "\\."))
mutate(df, new.col = str_split(x, "\\.")) %>% unnest(new.col)
M <- matrix(c(0.9,0,0.1,0,0.3, 0.2, 0.2, 0.3, 0, 0.5, 0.4, 0.1),ncol = 4, colnames = c("A","T","C","G"))
M <- matrix(c(0.9,0,0.1,0,0.3, 0.2, 0.2, 0.3, 0, 0.5, 0.4, 0.1),ncol = 4, col.names = c("A","T","C","G"))
?matrix
M <- matrix(c(0.9,0,0.1,0,0.3, 0.2, 0.2, 0.3, 0, 0.5, 0.4, 0.1),ncol = 4, colnames = c("A","T","C","G"))
M <- matrix(c(0.9,0,0.1,0,0.3, 0.2, 0.2, 0.3, 0, 0.5, 0.4, 0.1),ncol = 4, dimnames = list(NULL,c("A","T","C","G")))
M
M <- matrix(c(0.9,0,0.1,0,0.3, 0.2, 0.2, 0.3, 0, 0.5, 0.4, 0.1),ncol = 4, dimnames = list(1:3,c("A","T","C","G")))
knitr::opts_chunk$set(echo = TRUE)
M <- matrix(c(0.9,0,0.1,0,0.3, 0.2, 0.2, 0.3, 0, 0.5, 0.4, 0.1),
ncol = 4, dimnames = list(1:3,c("A","T","C","G")))
M
M <- matrix(c(0.9,0,0.1,0,
0.3, 0.2, 0.2, 0.3,
0, 0.5, 0.4, 0.1,
0.1, 0.7, 0.1, 0.1,
0.2, 0.1, 0.4, 0.3),
ncol = 4, dimnames = list(1:5,c("A","T","C","G")))
M
df
str_split_fixed(df$x, "\\.",2)
blah <- str_split_fixed(df$x, "\\.",2)
?as.data.frame
as.data.frame(blah)
as.data.frame(blah, col.names = c("One","Two"))
blah <- str_split_fixed(df$x, "\\.",2)
blah
as.data.frame(blah, col.names = c("One","Two"), fix.empty.names = TRUE)
blah <- as.data.frame(blah)
blah
names(blah) <- c("cone", "*")
blah
blah$`*`
blah$`*`
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
readLines("./keggcompounds.txt", n = 20)
readLines("../Datasets/keggcompounds.txt", n = 20)
kegg <- readLines("../Datasets/keggcompounds.txt")
length(kegg)
ids <- grep("^ENTRY", kegg, value = TRUE)
names <- grep("^NAME", kegg, value = TRUE)
length(ids)
length(names)
ids[1]; names[1]
ids <- gsub(".*(C\\d{5}).*","\\1", ids)
head(ids)
ids <- gsub(".*(C\\d{5}).*","\\1", ids)
str(ids)
sum(grepl(";",names))
# Extract the name from each one
short.names <- gsub("NAME\\s+(\\S+).*","\\1",names)
head(short.names)
# Extract the name from each one
short.names <- gsub("NAME\\s+(\\S+).*","\\1",names)
head(short.names)
short.names <- gsub(";$","",short.names)
short.names <- gsub(";$","",short.names)
head(short.names)
my.df <- data.frame(id = ids, name = short.names)
head(my.df, 20); tail(my.df, 20)
library(dplyr)
ids <- c("ID1","ID2","ID1")
reads <- c(20,25,30)
df1 <- data.frame(ids=ids, reads = reads)
df1 <- data.frame(ids = c("ID1","ID2"), meta.data = c("Thing1","Thing2"))
df1 <- data.frame(ids=ids, reads = reads)
df2 <- data.frame(ids = c("ID1","ID2"), meta.data = c("Thing1","Thing2"))
left_join(df2, df1, by = "ids")
df1
df2
df1
df1 %>% group_by(ids) %>% summarize(mean.reads = mean(reads))
df1 %>% group_by(ids) %>% summarize(mean.reads = mean(reads)) %>% as.data.frame()
library(ggpubr)
df <- data.frame(length = c(20,25.5, 30, 21), fp1 = c(1000,1200,1100,900), depth1 = c(19, 17, 18, 20))
df
ggscatter(data = df, x = "fp1", y = "depth1", color = "length")
df <- data.frame(read.length = c(20,25.5, 30, 21), fp1 = c(1000,1200,1100,900), depth1 = c(19, 17, 18, 20))
ggscatter(data = df, x = "fp1", y = "depth1", color = "read.length")
display.brewer.all()
library(RColorBrewer)
display.brewer.all()
knitr::opts_chunk$set(echo = TRUE)
library(trena)
load(system.file(package="trena", "extdata/ampAD.154genes.mef2cTFs.278samples.RData"))
hist(mtx.sub, main = "Expression Matrix Data")
library(limma)
mtx.voom <- voom(mtx.sub)$E
hist(mtx.voom, main = "VOOM-Transformed Expression Matrix Data")
variance.filter <- VarianceFilter(mtx.assay = mtx.voom, targetGene = "MEF2C", varSize = 0.5)
tf.list <- getCandidates(variance.filter)
str(tf.list)
# Sp
db.address <- system.file(package="trena", "extdata")
genome.db.uri <- paste("sqlite:/",db.address,"mef2c.neighborhood.hg38.gtfAnnotation.db", sep = "/")
project.db.uri <- paste("sqlite:/",db.address,"mef2c.neigborhood.hg38.footprints.db", sep = "/")
# Create the specs for the gene region and retrieve it
target.gene <- "MEF2C"
size.upstream <- 1000
size.downstream <- 1000
trena <- Trena("hg38")
gene.regions <- getProximalPromoter(trena, target.gene, size.upstream, size.downstream)
knitr::opts_chunk$set(echo = TRUE)
library(trena)
load(system.file(package="trena", "extdata/ampAD.154genes.mef2cTFs.278samples.RData"))
hist(mtx.sub, main = "Expression Matrix Data")
library(limma)
mtx.voom <- voom(mtx.sub)$E
hist(mtx.voom, main = "VOOM-Transformed Expression Matrix Data")
variance.filter <- VarianceFilter(mtx.assay = mtx.voom, targetGene = "MEF2C", varSize = 0.5)
tf.list <- getCandidates(variance.filter)
str(tf.list)
# Sp
db.address <- system.file(package="trena", "extdata")
genome.db.uri <- paste("sqlite:/",db.address,"mef2c.neighborhood.hg38.gtfAnnotation.db", sep = "/")
project.db.uri <- paste("sqlite:/",db.address,"mef2c.neigborhood.hg38.footprints.db", sep = "/")
# Create the specs for the gene region and retrieve it
target.gene <- "MEF2C"
size.upstream <- 1000
size.downstream <- 1000
trena <- Trena("hg38")
gene.regions <- getProximalPromoter(trena, target.gene, size.upstream, size.downstream)
knitr::opts_chunk$set(echo = TRUE)
library(trena)
load(system.file(package="trena", "extdata/ampAD.154genes.mef2cTFs.278samples.RData"))
hist(mtx.sub, main = "Expression Matrix Data")
library(limma)
mtx.voom <- voom(mtx.sub)$E
hist(mtx.voom, main = "VOOM-Transformed Expression Matrix Data")
variance.filter <- VarianceFilter(mtx.assay = mtx.voom, targetGene = "MEF2C", varSize = 0.5)
tf.list <- getCandidates(variance.filter)
str(tf.list)
# Sp
db.address <- system.file(package="trena", "extdata")
genome.db.uri <- paste("sqlite:/",db.address,"mef2c.neighborhood.hg38.gtfAnnotation.db", sep = "/")
project.db.uri <- paste("sqlite:/",db.address,"mef2c.neigborhood.hg38.footprints.db", sep = "/")
# Create the specs for the gene region and retrieve it
target.gene <- "MEF2C"
size.upstream <- 1000
size.downstream <- 1000
trena <- Trena("hg38")
gene.regions <- getProximalPromoter(trena, target.gene, size.upstream, size.downstream)
# Create a filter using the geneCenteredSpec option
footprint.filter <- FootprintFilter(genomeDB = genome.db.uri, footprintDB = project.db.uri,
regions = gene.regions)
# Run the getCandidates method
tbl <- getCandidates(footprint.filter)
str(tbl)
library(MotifDb)
tbl.tfs <- associateTranscriptionFactors(MotifDb, tbl, source="MotifDb", expand.rows=TRUE)
str(tbl.tfs)
genome.db.uri    <- "postgres://bddsrds.globusgenomics.org/hg38"  # has gtf table
footprint.db.uri <- "postgres://bddsrds.globusgenomics.org/brain_hint_20"  # has hits and regions tables
fpf <- FootprintFinder(genome.db.uri, footprint.db.uri, quiet=FALSE)
tbl.fp <- getFootprintsInRegion(fpf, "chr5", 88822685, 89011824)
str(tbl.fp)
system.time(fpf <- FootprintFinder(genome.db.uri, footprint.db.uri, quiet=FALSE))
library(GenomicRanges)
?GenomicRanges::`coverage,GenomicRanges-method`
library(RPostgreSQL)
dbname <- "fimo"
host <- "khaleesi"
db <- dbConnect(PostgreSQL(),
user = 'trena',
password = 'trena',
dbname = dbname,
host = host
)
dbListTables(db)
numHits <- dbGetQuery(db, "select reltuples from pg_class where relname = 'fimo_hg38'")[1,1]
numHits
?coverage
?GenomicRanges::union
?GenomicRanges
?GRanges
df <- data.frame(label = LETTERS[1:5], start = c(1,5,8,11,13), end = c(3,9,12,12,15))
df
gr <- with(df, GRanges(seqnames = label, IRanges(start = start, end = end)))
gr
?union
union(gr)
GenomicRanges::union(gr)
GenomicRanges::union(gr, shift(gr, 3))
coverage(gr)
GenomicRanges::gaps()
GenomicRanges::gaps
?GenomicRanges::gaps
range(gr)
gaps(gr)
gaps(gr)
disjoin(gr)
gr
reduce(gr)
range(gr)
blah <- range(gr)
blah
gr
range(gr)
?reduce
gr <- with(df, GenomicRanges(seqnames = label, IRanges(start = start, end = end)))
gr <- with(df, GRanges(seqnames = label, IRanges(start = start, end = end)))
gr
reduce(gr)
GenomicRanges::reduce(gr)
?dbReadTable
fimo.conn <- dbConnect(PostgreSQL(),
user = "trena",
password = "trena",
port = "5432",
host = "khaleesi",
dbname = "fimo"
)
dbListFields(fimo.conn, "fimo_hg38")
dbDisconnect(fimo.conn)
sinh(5)
sinh(15)
sinh(7)
sinh(12.5)
sinh(1)
sinh(2)
sinh(3)
sinh(4)
getwd()
setwd("./Documents/Github/BDDS/trenadb/fimo/")
dir()
blah <- readRDS("./2017_08_23_Motif_TF_Map.RDS")
dim(blah)
length(unique(blah$Motif))
length(unique(blah$TF))
head(unique(blah$TF))
head(unique(blah$TF),50)
tail(unique(blah$TF),50)
sum(grepl(unique(blah$TF))
)
sum(grepl("::",unique(blah$TF)))
sum(grepl(":",unique(blah$TF)))
sum(grepl(":|_",unique(blah$TF)))
grep(":|_",unique(blah$TF), value = TRUE)
filter(blah, TF == "Cgd2_3490")
dplyr::filter(blah, TF == "Cgd2_3490")
dplyr::filter(blah, grepl("::", TF))
dplyr::filter(blah, grepl("::", TF))
as.data.frame(dplyr::filter(blah, grepl("::", TF)))
setwd("~/Documents/Github/FH_intermediate_R/Week_5")
