library(TReNA)
?TReNA
?run.LassoPVSolver
?TReNA
detach("package:TReNA", unload=TRUE)
library(TReNA)
?TReNA
?solve
library(TReNA)
?TReNA
?solve
?solve.TReNA
library(TReNA)
?solve
?TReNA
?TReNA
?TReNA
library(TReNA)
?TReNA
?solve
?`run,BayesSpikeSolver-method`
library(TReNA)
?TReNA
?solve
?solve-methods
library(TReNA)
?solve
library(TReNA)
?TReNA
library(TReNA)
?TReNA
library(TReNA)
?TReNA
?solve
library(TReNA)
?solve
library(TReNA)
?TReNA
?solve
library(TReNA)
?TReNA
?TReNA
?solve
library(TReNA)
?solve
library(TReNA)
?solve
m <- data.frame(word.1 = rep(1:10), word.2 = rep(1:5))
m
m <- data.frame(word.1 = rep(1:10,10), word.2 = rep(1:5,20))
m
head(m)
head(m,21)
library(dplyr)
library(dplyr)
?summarize
?count
?summarize
summarize(m)
summarize(m,count)
?group_by
group_by(m, word.1,word.2)
group_by(m, word.1,word.2,add=TRUE)
?summarize
summarize(group_by(m, word.1))
summarize(m, word.1)
summarize(m, count(word.1))
summarize(m, word.1)
m <- data.frame(word.1 = rep(1:10,10), word.2 = rep(1:5,20),counts = rep(1,100))
head(m)
?ddply
library(plyr)
?ddply
?numcolwise
?aggregate
test <- ddply(m, "word.2",numcolwise(sum))
test
?ddply
test <- ddply(m, c("word.1","word.2"),numcolwise(sum))
test
m <- data.frame(word.1 = rep(1:10,10), word.2 = rep(1:5,20),word.3 = rep(1:2, 50), word.4 = rep(1:20, 5),counts = rep(1,100))
test <- ddply(m, c("word.1","word.2","word.3","word.4"),numcolwise(sum))
head(test)
test
?solve
?make.names
library(BiocInstaller)
biocLite("xgboost")
library(xgboost)
?xgboost
?xgb.importance
?roc
library(pROC)
library(ROCR)
?roc
blah1 <- sample(0:1,10,replace = TRUE)
blah1
blah2 <- sample(0:1,10,replace = TRUE)
roc(blah1,blah2)
roc(blah1,blah2,ret=c("threshold", "sens", "spec", "ppv", "npv", "acc"))
blah3 <- roc(blah1,blah2,ret=c("threshold", "sens", "spec", "ppv", "npv", "acc"))
coords(blah3)
blah2 <- abs(rnorm(10))
blah2
blah2 <- abs(rnorm(10))
blah2
0.5*blah2
blah2 <- 0.5*blah2
blah3 <- roc(blah1,blah2,ret=c("threshold", "sens", "spec", "ppv", "npv", "acc"))
blah3
coords(blah3)
class(blah3)
coords((blah3),
seq(from=0, to=1, length.out=num.roc.points),
ret=c("threshold", "sens", "spec", "ppv", "npv", "acc"))
num.roc.points = 101
coords((blah3),
seq(from=0, to=1, length.out=num.roc.points),
ret=c("threshold", "sens", "spec", "ppv", "npv", "acc"))
library(ggplot2)
?theme_minimal
knitr::opts_chunk$set(echo = TRUE)
library(trena)
load(system.file(package="trena", "extdata/ampAD.154genes.mef2cTFs.278samples.RData"))
hist(mtx.sub, main = "Expression Matrix Data")
library(limma)
mtx.voom <- voom(mtx.sub)$E
hist(mtx.voom, main = "VOOM-Transformed Expression Matrix Data")
variance.filter <- VarianceFilter(mtx.assay = mtx.voom, targetGene = "MEF2C")
tf.list <- getCandidates(variance.filter, extraArgs = list("target.gene" = "MEF2C", "var.size" = 0.5))
variance.filter <- VarianceFilter(mtx.assay = mtx.voom, targetGene = "MEF2C", varSize = 0.5)
tf.list <- getCandidates(variance.filter)
str(tf.list)
# Sp
db.address <- system.file(package="trena", "extdata")
genome.db.uri <- paste("sqlite:/",db.address,"genome.sub.db", sep = "/")
project.db.uri <- paste("sqlite:/",db.address,"project.sub.db", sep = "/")
# Create the specs for the gene region
target.gene <- "MEF2C"
size.upstream <- 1000
size.downstream <- 1000
geneCenteredSpec <- list(targetGene = target.gene, tssUpstream = size.upstream, tssDownstream = size.downstream)
# Create a filter using the geneCenteredSpec option
footprint.filter <- FootprintFilter(genomeDB = genome.db.uri, footprintDB = project.db.uri,
geneCenteredSpec = geneCenteredSpec)
# Run the getCandidates method
tfs <- getCandidates(footprint.filter)
str(tfs)
# Create the regionsSpec information
mef2c.tss <- 88904257   # minus strand
chrom <- "chr5"
start <- mef2c.tss - 1000
end   <- mef2c.tss + 1000
chromLoc <- sprintf("%s:%d-%d", chrom, start, end)
regionsSpec <- c(chromLoc)
# Create the filter
footprint.filter <- FootprintFilter(genomeDB = genome.db.uri, footprintDB = project.db.uri, regionsSpec = regionsSpec)
# Grab the candidates and return
tfs <- getCandidates(footprint.filter)
str(tfs)
genome.db.uri    <- "postgres://bddsrds.globusgenomics.org/hg38"  # has gtf and motifsgenes tables
footprint.db.uri <- "postgres://bddsrds.globusgenomics.org/brain_hint_20"  # has hits and regions tables
fpf <- FootprintFinder(genome.db.uri, footprint.db.uri, quiet=FALSE)
tbl.fp <- getFootprintsInRegion(fpf, "chr5", 88822685, 89011824)
str(tbl.fp)
lasso.solver <- LassoSolver(mtx.assay = mtx.voom,
targetGene = "MEF2C",
candidateRegulators = tfs$tfs
)
tbl <- run(lasso.solver)
str(tbl)
lasso.solver.keep <- LassoSolver(mtx.assay = mtx.voom,
targetGene = "MEF2C",
candidateRegulators = tfs$tfs,
keep.metrics = TRUE
)
tbl.keep <- run(lasso.solver.keep)
str(tbl.keep)
set.seed(10)
tbl <- run(lasso.solver)
str(tbl)
set.seed(10)
lasso.solver.keep <- LassoSolver(mtx.assay = mtx.voom,
targetGene = "MEF2C",
candidateRegulators = tfs$tfs,
keep.metrics = TRUE
)
tbl.keep <- run(lasso.solver.keep)
str(tbl.keep)
lasso.solver.lenient  <- LassoSolver(mtx.assay = mtx.voom,
targetGene = "MEF2C",
candidateRegulators = tfs$tfs,
lambda = 0.05
)
tbl.lenient <- run(lasso.solver.lenient)
str(tbl.lenient)
ensemble.solver <- EnsembleSolver(mtx.assay = mtx.voom,
targetGene = "MEF2C",
candidateRegulators = tfs$tfs)
tbl.out <- run(ensemble.solver)
str(tbl.out)
ensemble.solver <- EnsembleSolver(mtx.assay = mtx.voom,
targetGene = "MEF2C",
candidateRegulators = tfs$tfs)
tbl.out <- run(ensemble.solver)
tbl.out
ensemble.full <- EnsembleSolver(mtx.assay = mtx.voom,
targetGene = "MEF2C",
candidateRegulators = tfs$tfs,
solverNames = c("lasso","pearson","randomforest","ridge")
)
tbl.full <- run(ensemble.full)
str(tbl.full)
ensemble.full <- EnsembleSolver(mtx.assay = mtx.voom,
targetGene = "MEF2C",
candidateRegulators = tfs$tfs,
solverNames = c("lasso","pearson","randomforest","ridge"),
geneCutoff = 1
)
tbl.full <- run(ensemble.full)
str(tbl.full)
?dplyr::filter
?BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38
?org.Hs.eg.db::org.Hs.eg.db
library(org.Hs.eg.db)
dim(org.Hs.eg.db)
length(org.Hs.eg.db)
class(org.Hs.eg.db)
head(org.Hs.eg.db)
org.Hs.eg.db
select(org.Hs.eg.db, keys = "GO:0010467", keytype = "GO", columns = c("SYMBOL", "GO"))$SYMBOL
?`select,OrgDb-method`
select(org.Hs.eg.db::org.Hs.eg.db, keys = "GO:0010467", keytype = "GO", columns = c("SYMBOL", "GO"))$SYMBOL
SNPlocs.Hsapiens.dbSNP144.GRCh38
library(SNPlocs.Hsapiens.dbSNP144.GRCh38)
SNPlocs.Hsapiens.dbSNP144.GRCh38::SNPlocs.Hsapiens.dbSNP144.GRCh38
?snpsById
?IUPAC_CODE_MAP
?reverseComplement
?maxScore
?IUPAC_CODE_MAP
?read.table
?select
library(org.Hs.eg.db)
?select
?IRanges
IRanges::IRanges()
library(trena)
?getAssayData
library(trena)
?getAssayData
?Solver
?lm
?getSeq
?tbl
?dplyr::tbl
?src_postgres
?dplyr::src_postgres
?read.delim
?read_delim
library(MotifDb)
jaspar <- subset(MotifDb, dataSource == "jaspar2016")
head(jaspar)
names(values(MotifDb))
table(values(jaspar)$tfFamily)
df <- data_frame(x = 1:5,y=letters[1:5],z=rep(0,5))
library(dplyr)
df <- data_frame(x = 1:5,y=letters[1:5],z=rep(0,5))
df
df[,apply(df,2,function(x) !all(x==0))]
?union_all
df
df1
df1 <- data_frame(x = 1:5,y=1:5)
df2 <- data_frame(x = sample(1:5),y = rep(1,5))
df2
union(df1,df2)
class(union(df1,df2))
?findOverlaps
?bind_rows
library(ggpubr)
?ggscatter
blah <- data_frame(x = 1:20, F1 = rep(2,20), F2 = rep(3,20))
blah
melt(blah)
library(reshape2)
melt(blah)
?melt
melt(blah, id.vars = c("F1","F2"))
melt(blah, id.vars = "x")
melt(blah, id.vars = "x", measure.vars = "Prob")
melt(blah, id.vars = "x", measure.vars = c("F1","F2"))
melt(blah, id.vars = "x", measure.vars = c("F1","F2"), variable.name = "Prob")
melt(blah, id.vars = "x", measure.vars = c("F1","F2"), variable.name = "Method")
melt(blah, id.vars = "x", measure.vars = c("F1","F2"), variable.name = "Method", value.name = "Prob")
df
df1
df2
df <- data_frame(X = rep(1,5), y = c(1,2,3,1,2))
df
unique(df)
?ggscatter
blah <- 123456789
blah
?format
format(blah, big.mark = ",")
?sign
?`signif
''
``
`
?signif
?bind_rows
character(0)
blah <- character(0)
c(blah, "one", "two")
library(RUnit)
?checkException
all.tfs <- character(0)
new.tfs <- c("One","Two","Three")
union(all.tfs, new.tfs)
paste0("chrom",sample(c(1:22,"X","Y"),10))
paste0("chr",sample(c(1:22,"X","Y"),10))
fake.data <- list()
for(i = 1:26){ num.points <- sample(100:2000); fake.data[[i]] <- rnorm(num.points)}
for(i in 1:26){ num.points <- sample(100:2000); fake.data[[i]] <- rnorm(num.points)}
sapply(fake.data, length)
sample(100:2000)
sapply(fake.data, length)
head(fake.data[[1]])
str(fake.data)
blah <- rnorm(1000)
length(blah)
blah <- rnorm(1001)
length(blah)
head(fake.data[[1]])
head(fake.data[[2]])
for(i in 1:26){ num.points <- sample(100:2000); fake.data[[i]] <- rnorm(num.points)}
sapply(fake.data, length)
sample(100:2000)
?sample
for(i in 1:26){ num.points <- sample(100:2000,1); fake.data[[i]] <- rnorm(num.points)}
str(fake.data)
for(i in 1:1000){ num.points <- sample(100:2000,1); fake.data[[i]] <- rnorm(num.points)}
str(fake.data)
saveRDS(fake.data, file = "~/Documents/Github/FH_intermediate_R/Datasets/fake.data.RDS")
library(trena)
knitr::opts_chunk$set(echo = TRUE)
genome.db.uri    <- "postgres://bddsrds.globusgenomics.org/hg38"  # has gtf and motifsgenes tables
footprint.db.uri <- "postgres://bddsrds.globusgenomics.org/brain_hint_20"  # has hits and regions tables
fpf <- FootprintFinder(genome.db.uri, footprint.db.uri, quiet=FALSE)
?full_join
library(dplyr)
?full_join
library(GenomicRanges)
?findOverlaps
setwd("~/Documents/Github/FH_intermediate_R/Week_1")
knitr::opts_chunk$set(echo = TRUE)
my.url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data"
download.file(url = my.url,
destfile = "./breastCancerData.csv")
blah <- read.csv("./breastCancerData.csv")
head(blah)
names(cancer.data) <- c("SampleID", "ClumpThickness", "SizeUniformity",
"ShapeUniformity", "MarginalAdhesion", "SingleCellSize",
"BareNuclei", "BlandChromatin", "NormalNucleoli",
"Mitoses", "Class")
cancer.data <- read.csv("./breastCancerData.csv")
head(cancer.data)
names(cancer.data) <- c("SampleID", "ClumpThickness", "SizeUniformity",
"ShapeUniformity", "MarginalAdhesion", "SingleCellSize",
"BareNuclei", "BlandChromatin", "NormalNucleoli",
"Mitoses", "Class")
head(cancer.data)
# Create an empty vector
new.col <- character(length = nrow(cancer.data))
for(i in 1:nrow(cancer.data)){
if(cancer.data$Class[i] == 2){
new.col[i] <- "Benign"
} else {
new.col[i] <- "Malignant"
}
}
summary(new.col)
cancer.data$ClassName <- as.factor(new.col)
cancer.data$ClassName <- as.factor(new.col)
str(cancer.data)
names(cancer.data) <- c("SampleID", "ClumpThickness", "SizeUniformity",
"ShapeUniformity", "MarginalAdhesion", "SingleCellSize",
"BareNuclei", "BlandChromatin", "NormalNucleoli",
"Mitoses", "Class")
str(cancer.data)
cancer.data <- read.csv("./breastCancerData.csv")
str(cancer.data)
cancer.data <- read.csv("./breastCancerData.csv")
str(cancer.data)
names(cancer.data) <- c("SampleID", "ClumpThickness", "SizeUniformity",
"ShapeUniformity", "MarginalAdhesion", "SingleCellSize",
"BareNuclei", "BlandChromatin", "NormalNucleoli",
"Mitoses", "Class")
str(cancer.data)
cancer.data$ClassName <- as.factor(new.col)
str(cancer.data)
cancer.data$ClassName <- NULL
str(cancer.data)
new.col <- character(length = nrow(cancer.data))
for(i in 1:nrow(cancer.data)){
new.col[i] <- ifelse(cancer.data$Class[i] == 2, "Benign","Malignant")
}
cancer.data$ClassName <- as.factor(new.col)
str(cancer.data)
fakeData <- readRDS("../Datasets/fake.data.RDS")
length(fakeData)
# Create 3 vectors to store values
all.lengths <- numeric(length = length(fakeData))
all.means <- numeric(length = length(fakeData))
all.sds <- numeric(length = length(fakeData))
# Loop over the list using double brackets
for(i in 1:length(fakeData)){
all.lengths[i] <- length(fakeData[[i]])
all.means[i] <- mean(fakeData[[i]])
all.sds[i] <- sd(fakeData[[i]])
}
df <- data.frame(Lengths = all.lengths,
Means = all.means,
StDevs = all.sds)
summary(df)
df <- data.frame(Lengths = all.lengths,
Means = all.means,
StDevs = all.sds)
summary(df)
my.list <- (data.frame(mapped.reads = rnorm(10)), data.frame(mapped.reads = rnorm(10)), data.frame(mapped.reads = rnorm(10)))
my.list <- list(data.frame(mapped.reads = rnorm(10)), data.frame(mapped.reads = rnorm(10)), data.frame(mapped.reads = rnorm(10)))
my.list
chroms <- paste0("chr",1:10)
chroms
library(purr)
library(purrr)
op1 <- lapply(my.list, t)
op1
op1 <- lapply(my.list, function(x) as.dataframe(t(x)))
op1 <- lapply(my.list, function(x) as.data.frame(t(x)))
op1
file.names <- c("File1","File2","File3")
names(op1) <- file.names
op1
blah <- bind_rows(op1, .id = "File.Name")
blah
my.special.fxn <- function(x,chroms){x <- as.dataframe(t(x)); names(x) <- chroms; return(x)}
op1 <- lapply(my.list, my.special.fxn, chroms = chroms)
my.special.fxn <- function(x,chroms){x <- as.data.frame(t(x)); names(x) <- chroms; return(x)}
op1 <- lapply(my.list, my.special.fxn, chroms = chroms)
op1
blah <- bind_rows(op1, .id = "File.Name")
blah
op1 <- lapply(my.list, my.special.fxn, chroms = chroms)
names(op1) <- file.names
blah <- bind_rows(op1, .id = "File.Name")
blah
library(biomaRt)
?useMart
mart <- useMart('ensembl')
listDatasets(mart)
?getBM
blah <- listDatasets(mart)
grep("sapiens", blah$dataset)
blah$dataset[58]
blah[58,]
grep("GRCh37", blah$version)
blah <- listDatasets(mart)
6/22
5/21
# Sp
db.address <- system.file(package="trena", "extdata")
genome.db.uri <- paste("sqlite:/",db.address,"genome.sub.db", sep = "/")
project.db.uri <- paste("sqlite:/",db.address,"project.sub.db", sep = "/")
# Create the specs for the gene region and retrieve it
target.gene <- "MEF2C"
size.upstream <- 1000
size.downstream <- 1000
trena <- Trena("hg38")
gene.regions <- getProximalPromoter(trena, target.gene, size.upstream, size.downstream)
