v2
intersect(v1, v2)
union(v1,v2)
setdiff(v1, v2)
setdiff(v2, v1)
setequal(v1,v2)
setequal(1:5,1:5)
library(dplyr)
df1
df2
union(df1, df2)
dim(left_join(df1, df2), by = c("x","q"))
dim(left_join(df1, df2, by = c("x","q")))
df2
dim(left_join(df1, df2, by = c("x" = "q")))
dim(df1)
df1 <- data_frame(a = 1:10, b = letters[1:10])
df1
df2 <- data_frame(a = 1:10, c = letters[1:10])
df2
union(df1, df2)
left_join(df1, df2)
semi_join(df1, df2)
semi_join(df1, df2[,1:5])
semi_join(df1, df2[1:5,])
df[1:5,]
df2[1:5,]
semi_join(df1, df2[1:5,])
full_join(df1, df2)
A <- sample(letters, 10)
B <- sample(letters,10)
A
B
union(A,B)
intersect(A,B)
df1
rbind(df1, list = (1, "c"))
rbind(df1,  df2)
names(df2)
cbind(df1,  df2)
rbind(df1,  df1)
rbind(df1,  df2)
bind_rows(df1,  df2)
l <- list(df1, df2)
bind_rows(df1,df2)
bind_colss(df1,df2)
bind_cols(df1,df2)
bind_rows(l)
bind_cols(l)
cbind(l)
my.stuff <- sample(c("One", "Two", "Three"), 100, replace = TRUE)
head(my.stuff)
table(my.stuff)
df <- data.frame(x = my.stuff)
str(df)
?data.frame
df <- data_frame(x = my.stuff)
str(df)
rm(list = ls())
data.frame(x = 1:10, y = 2*x)
data_frame(x = 1:10, y = 2*x)
x <- c(1:5, letters[1:5])
x
class(1:5)
class(x)
TRUE - 1
sum(TRUE)
x
y <- x[1:5]
y
y <- as.numeric(x[1:5])
y
class(y)
y <- as.integer(x[1:5])
y
class(y)
as.integer(5.4)
my.stuff <- sample(c("One", "Two", "Three"), 100, replace = TRUE)
df <- data.frame(my.stuff)
str(df)
str(df)
head(df)
my.stuff <- sample(c("One", "Four", "Three"), 100, replace = TRUE)
df <- data.frame(my.stuff)
str(df)
head(df)
my.stuff <- sample(c(1974, 1975, 1976), 100, replace = TRUE)
df <- data.frame(my.stuff)
str(df)
df <- data.frame(as.factor(my.stuff))
str(df)
head(df)
head(as.numeric(df$as.factor.my.stuff.))
head(as.numeric(as.character(df$as.factor.my.stuff.)))
upn1 <- "B817957"
upn2 <- "0977134"
test.set <- c(upn1, upn2)
test.set
test.set[2] <- "977134"
test.set
for(i in test.set){if(len(i) == 6){i <- paste0(0, i)}}
for(i in test.set){if(length(i) == 6){i <- paste0(0, i)}}
test.set
length(test.set[0])
for(i in test.set){if(nchar(i) == 6){i <- paste0(0, i)}}
test.set
nchar(test.set[1])
nchar(test.set[2])
for(i in test.set){if(nchar(i) == 6){print(paste0(0, i))}}
grep("^\\S{6}$", test.set)
gsub("(^\\S{6}$)", "0\\1", test.set)
gsub("(\\S{6})", "0\\1", test.set)
gsub("(^\\S{6}$)", "0\\1", test.set)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
name.vec <- c("Query.ID", "Target.ID", "Optimal.offset", "Pvalue","Evalue","Qvalue","Overlap","Query.consensus","Target.consensus","Orientation")
# All of HOCOMOCO to JASPAR
human.hoco <- read.table(file = "./TOMTOM/hocomoco_jaspar_human/tomtom.txt", stringsAsFactors = FALSE)
mouse.hoco <- read.table(file = "./TOMTOM/hocomoco_jaspar_mouse/tomtom.txt", stringsAsFactors = FALSE)
all.hoco <- rbind(human.hoco,mouse.hoco)
names(all.hoco) <- name.vec
# UniPROBE to JASPAR/HOCOMOCO and SwissRegulon to JASPAR/HOCOMOCO
uniprobe <- read.table(file = "./TOMTOM/uniprot_compare/tomtom.txt", stringsAsFactors = FALSE)
swissreg <- read.table(file = "./TOMTOM/swiss_regulon_compare/tomtom.txt", stringsAsFactors = FALSE)
names(uniprobe) <- name.vec
names(swissreg) <- name.vec
# SwissRegulon to UniPROBE
swiss.v.uniprobe <- read.table(file = "./TOMTOM/swiss_vs_uniprobe/tomtom.txt", stringsAsFactors = FALSE)
names(swiss.v.uniprobe) <- name.vec
df <- data_frame(Query = c("JH-A","JH-C","UP-D"),
Target = c("JH-B","UP-D","SR-E"))
df
list(all.hoco, uniprobe, swissreg) %>%
bind_rows() %>%
select(Query.ID, Target.ID, Pvalue) %>%
mutate(logP = -1*log10(Pvalue)) %>%
filter(logP >= 7.3) -> first.4.tomtom
head(first.4.tomtom)
length(unique(first.4.tomtom$Query.ID))
swiss.repeats <- swiss.v.uniprobe %>%
select(Query.ID, Target.ID, Pvalue) %>%
mutate(logP = -1*log10(Pvalue)) %>% filter(logP >= 7.3)
length(unique(swiss.repeats$Query.ID))
df1 <- data_frame(Query = c("H-A","H-B","UP-A","UP-B","SR-A","SR-B"),
Target = c("J-A","J-B","J-B","J-C","J-D","J-C"))
df1
df2 <- data_frame(Query = c("SR-A","SR-C","SR-D"),
Target = c("UP-A","UP-B","UP-D"))
df2
df3 <- data_frame(Query = c("H-A","H-B","UP-A","UP-B","SR-A","SR-B", "SR-A","SR-C","SR-D"),
Target = c("J-A","J-B","J-B","J-C","J-D","J-C","J-B","J-C","UP-D"))
df3
# Create a "True Mapping" to JD
true.map <- df2 %>%
inner_join(df1, by = c("Target" = "Query")) %>% # Add the J-ones where they appear for UP ones, filtering only those with "true" J-ones
select(Query, Target = Target.y) # Grab just the SR Queries and the J-D
true.map
# Create a "New Mapping" by pulling out things w/o JD relationships and adding the "true.map"
new.map <- df2 %>%
anti_join(df1, by = c("Target" = "Query"))
# Finally, add the "new.map" to the original to make a "full.map"
full.map <- df1 %>% bind_rows(list(true.map,new.map))
full.map
# First, pull out just query and target for each data set
swiss.repeats <- swiss.repeats %>% select(Query.ID,Target.ID)
first.4.tomtom <- first.4.tomtom %>% select(Query.ID,Target.ID)
# Create a "True Mapping" to JD
true.map <- swiss.repeats %>%
inner_join(first.4.tomtom, by = c("Target.ID" = "Query.ID")) %>% # Add the J-ones where they appear for UP ones, filtering only those with "true" J-ones
select(Query.ID, Target.ID = Target.ID.y) # Grab just the SR Queries and the J-D
#true.map
# Create a "New Mapping" by pulling out things w/o JD relationships and adding the "true.map"
new.map <- swiss.repeats %>%
anti_join(first.4.tomtom, by = c("Target.ID" = "Query.ID"))
# Finally, add the "new.map" to the original to make a "full.map"
full.map <- first.4.tomtom %>% bind_rows(list(true.map,new.map))
nrow(full.map)
swiss.repeats$Query.ID[1]
swiss.repeats %>% filter(Query.ID == "NA-SwissRegulon-ALX3.SwissRegulon") %>% nrow()
first.4.tomtom %>% filter(Query.ID == swiss.repeats$Target.ID[1]) %>% nrow()
full.map %>% filter(Query.ID == "NA-SwissRegulon-ALX3.SwissRegulon") %>% nrow()
full.map %>%
filter(Query.ID == "NA-SwissRegulon-ALX3.SwissRegulon") %>%
group_by(Target.ID) %>%
summarise(Duplicates = n()) %>%
nrow()
unique.map <- full.map[!duplicated(full.map),]
nrow(unique.map)
first.4.tomtom[!duplicated(first.4.tomtom),] %>% nrow()
swiss.repeats[!duplicated(swiss.repeats),] %>% nrow()
Table.1 <- unique.map
library(MotifDb)
# Grab all jaspar and HOCOMOCOv10 for Human/Mouse
human.mouse.motifs <- subset(MotifDb, dataSource %in% c("HOCOMOCOv10","jaspar2016"))
human.mouse.motifs <- subset(human.mouse.motifs, organism %in% c("Hsapiens","Mmusculus"))
# Grab all jaspare for other vertebrates:
vertebrates <- c("Ggallus","Nsp.","Ocuniculus","Rnorvegicus","Rrattus","Vertebrata", "Xlaevis")
vert.motifs <- subset(query(MotifDb, "jaspar2016"), organism %in% vertebrates)
# Grab all UP and SR motifs
all.uniprobe <- query(MotifDb, "uniprobe")
all.swiss <- query(MotifDb, "swissregulon")
all.motifs <- c(human.mouse.motifs,
vert.motifs,
all.uniprobe,
all.swiss)
length(all.motifs)
motif.id.map <- data_frame(Long.ID = names(all.motifs),
Short.ID = values(all.motifs)$providerId,
TF = values(all.motifs)$geneSymbol,
Origin = values(all.motifs)$dataSource)
head(motif.id.map)
head(motif.id.map)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
name.vec <- c("Query.ID", "Target.ID", "Optimal.offset", "Pvalue","Evalue","Qvalue","Overlap","Query.consensus","Target.consensus","Orientation")
# All of HOCOMOCO to JASPAR
human.hoco <- read.table(file = "./TOMTOM/hocomoco_jaspar_human/tomtom.txt", stringsAsFactors = FALSE)
mouse.hoco <- read.table(file = "./TOMTOM/hocomoco_jaspar_mouse/tomtom.txt", stringsAsFactors = FALSE)
all.hoco <- rbind(human.hoco,mouse.hoco)
names(all.hoco) <- name.vec
# UniPROBE to JASPAR/HOCOMOCO and SwissRegulon to JASPAR/HOCOMOCO
uniprobe <- read.table(file = "./TOMTOM/uniprot_compare/tomtom.txt", stringsAsFactors = FALSE)
swissreg <- read.table(file = "./TOMTOM/swiss_regulon_compare/tomtom.txt", stringsAsFactors = FALSE)
names(uniprobe) <- name.vec
names(swissreg) <- name.vec
# SwissRegulon to UniPROBE
swiss.v.uniprobe <- read.table(file = "./TOMTOM/swiss_vs_uniprobe/tomtom.txt", stringsAsFactors = FALSE)
names(swiss.v.uniprobe) <- name.vec
df <- data_frame(Query = c("JH-A","JH-C","UP-D"),
Target = c("JH-B","UP-D","SR-E"))
df
list(all.hoco, uniprobe, swissreg) %>%
bind_rows() %>%
select(Query.ID, Target.ID, Pvalue) %>%
mutate(logP = -1*log10(Pvalue)) %>%
filter(logP >= 7.3) -> first.4.tomtom
head(first.4.tomtom)
length(unique(first.4.tomtom$Query.ID))
swiss.repeats <- swiss.v.uniprobe %>%
select(Query.ID, Target.ID, Pvalue) %>%
mutate(logP = -1*log10(Pvalue)) %>% filter(logP >= 7.3)
length(unique(swiss.repeats$Query.ID))
df1 <- data_frame(Query = c("H-A","H-B","UP-A","UP-B","SR-A","SR-B"),
Target = c("J-A","J-B","J-B","J-C","J-D","J-C"))
df1
df2 <- data_frame(Query = c("SR-A","SR-C","SR-D"),
Target = c("UP-A","UP-B","UP-D"))
df2
df3 <- data_frame(Query = c("H-A","H-B","UP-A","UP-B","SR-A","SR-B", "SR-A","SR-C","SR-D"),
Target = c("J-A","J-B","J-B","J-C","J-D","J-C","J-B","J-C","UP-D"))
df3
# Create a "True Mapping" to JD
true.map <- df2 %>%
inner_join(df1, by = c("Target" = "Query")) %>% # Add the J-ones where they appear for UP ones, filtering only those with "true" J-ones
select(Query, Target = Target.y) # Grab just the SR Queries and the J-D
true.map
# Create a "New Mapping" by pulling out things w/o JD relationships and adding the "true.map"
new.map <- df2 %>%
anti_join(df1, by = c("Target" = "Query"))
# Finally, add the "new.map" to the original to make a "full.map"
full.map <- df1 %>% bind_rows(list(true.map,new.map))
full.map
# First, pull out just query and target for each data set
swiss.repeats <- swiss.repeats %>% select(Query.ID,Target.ID)
first.4.tomtom <- first.4.tomtom %>% select(Query.ID,Target.ID)
# Create a "True Mapping" to JD
true.map <- swiss.repeats %>%
inner_join(first.4.tomtom, by = c("Target.ID" = "Query.ID")) %>% # Add the J-ones where they appear for UP ones, filtering only those with "true" J-ones
select(Query.ID, Target.ID = Target.ID.y) # Grab just the SR Queries and the J-D
#true.map
# Create a "New Mapping" by pulling out things w/o JD relationships and adding the "true.map"
new.map <- swiss.repeats %>%
anti_join(first.4.tomtom, by = c("Target.ID" = "Query.ID"))
# Finally, add the "new.map" to the original to make a "full.map"
full.map <- first.4.tomtom %>% bind_rows(list(true.map,new.map))
nrow(full.map)
swiss.repeats$Query.ID[1]
swiss.repeats %>% filter(Query.ID == "NA-SwissRegulon-ALX3.SwissRegulon") %>% nrow()
first.4.tomtom %>% filter(Query.ID == swiss.repeats$Target.ID[1]) %>% nrow()
full.map %>% filter(Query.ID == "NA-SwissRegulon-ALX3.SwissRegulon") %>% nrow()
full.map %>%
filter(Query.ID == "NA-SwissRegulon-ALX3.SwissRegulon") %>%
group_by(Target.ID) %>%
summarise(Duplicates = n()) %>%
nrow()
unique.map <- full.map[!duplicated(full.map),]
nrow(unique.map)
first.4.tomtom[!duplicated(first.4.tomtom),] %>% nrow()
swiss.repeats[!duplicated(swiss.repeats),] %>% nrow()
Table.1 <- unique.map
library(MotifDb)
# Grab all jaspar and HOCOMOCOv10 for Human/Mouse
human.mouse.motifs <- subset(MotifDb, dataSource %in% c("HOCOMOCOv10","jaspar2016"))
human.mouse.motifs <- subset(human.mouse.motifs, organism %in% c("Hsapiens","Mmusculus"))
# Grab all jaspare for other vertebrates:
vertebrates <- c("Ggallus","Nsp.","Ocuniculus","Rnorvegicus","Rrattus","Vertebrata", "Xlaevis")
vert.motifs <- subset(query(MotifDb, "jaspar2016"), organism %in% vertebrates)
# Grab all UP and SR motifs
all.uniprobe <- query(MotifDb, "uniprobe")
all.swiss <- query(MotifDb, "swissregulon")
all.motifs <- c(human.mouse.motifs,
vert.motifs,
all.uniprobe,
all.swiss)
length(all.motifs)
motif.id.map <- data_frame(Long.ID = names(all.motifs),
Short.ID = values(all.motifs)$providerId,
TF = values(all.motifs)$geneSymbol,
Origin = values(all.motifs)$dataSource)
head(motif.id.map)
length(unique(motif.id.map$TF))
motif.id.map %>% filter(grepl("SwissRegulon",Long.ID)) %>% head() -> test.set
test.set
gsub("^Hsapiens-SwissRegulon", "NA-SwissRegulon", test.set$Long.ID)
motif.id.map$Long.ID <- gsub("^Hsapiens-SwissRegulon", "NA-SwissRegulon", motif.id.map$Long.ID)
prelim.mapping <- left_join(unique.map,motif.id.map, by = c("Query.ID" = "Long.ID")) %>%
select("Motif" = "Target.ID",TF, Origin)
head(prelim.mapping); tail(prelim.mapping)
## Get the short IDs to test on
motif.id.map %>%
semi_join(unique.map, by = c("Long.ID" = "Query.ID")) %>%
select(Short.ID) -> short.ID
nonredundant.motifs <- subset(all.motifs, !(providerId %in% short.ID$Short.ID))
length(nonredundant.motifs)
data_frame(Motif = names(nonredundant.motifs),
TF = values(nonredundant.motifs)$geneSymbol,
Origin = values(nonredundant.motifs)$dataSource) %>%
bind_rows(prelim.mapping) -> dups.mapping
nrow(dups.mapping)
Table.2 <- dups.mapping[!duplicated(dups.mapping),]
nrow(Table.2); head(Table.2); tail(Table.2)
seth.table <- read.table(system.file(package="trena", "extdata", "motifGenes.tsv"), sep = "\t", header=TRUE, stringsAsFactors = FALSE)
head(seth.table)
german.truck <- seth.table %>% select("Short.ID" = "motif","TF" = "tf.gene") %>% mutate(Origin = "TFClass")
head(german.truck)
length(intersect(german.truck$Short.ID,motif.id.map$Short.ID))
nrow(filter(german.truck, Short.ID %in% motif.id.map$Short.ID))
setdiff(german.truck$Short.ID,motif.id.map$Short.ID)
german.truck$Short.ID <- gsub(".*(UP\\d{5}).*","\\1",german.truck$Short.ID)
length(setdiff(german.truck$Short.ID,motif.id.map$Short.ID))
motifs.to.add <- german.truck %>% inner_join(motif.id.map, by = "Short.ID")
head(motifs.to.add)
trimmed.motifs <- motifs.to.add %>% select("Motif" = "Long.ID", "TF" = "TF.x", "Origin" = "Origin.x")
Table.2 %>% dplyr::union(trimmed.motifs) -> Motif.TF.Map
head(Motif.TF.Map); tail(Motif.TF.Map); nrow(Motif.TF.Map)
extra.motifs <- setdiff(motifs.to.add$Long.ID, Table.2$Motif)
extra.motifs
Motif.TF.Map %>% filter(Motif %in% extra.motifs)
Motif.TF.Map %>% filter(Motif %in% extra.motifs) %>%
inner_join(Table.1, by = c("Motif" = "Query.ID")) %>%
select("Motif"  = "Target.ID", TF) %>%
mutate(Origin = "TFClass") -> corrected.extras
dim(corrected.extras)
corrected.extras
# Take out the 6 bad rows
Motif.TF.Map %>% filter(!(Motif %in% extra.motifs)) -> Motif.TF.Map
nrow(Motif.TF.Map)
# Add in the 24 good rows
Motif.TF.Map %>% dplyr::union(corrected.extras) -> Motif.TF.Map
nrow(Motif.TF.Map)
length(unique(Motif.TF.Map$Motif))
sum(duplicated(Motif.TF.Map))
Motif.TF.Map %>% select(TF, Origin) %>%
group_by(Origin) %>%
summarize(Total.Mappings = n(),
Unique.TFs = n_distinct(TF))
df <- data_frame(Motif = c("A","A","B"),
TF = c("1","1","2"),
Origin = c("a","b","a"))
data_frame(Motif = c("A","B"),
TF = c("1","2"),
Origin = c("a;b","a"))
df <- data_frame(Motif = c("A","A","B"),
TF = c("1","1","2"),
Origin = c("a","b","a"))
df
library(tidyr)
# Create a list variable (a list of data frames) with nest
df %>% nest(Origin) -> df.w.dfs
# Use an sapply to change the column with a collapse
f <- function(x){x$Origin %>% paste0(collapse = ";")}
df.w.dfs$Origin <- sapply(df.w.dfs$data, f)
df.w.dfs$data <- NULL
df.w.dfs
df %>% nest(Origin)
library(RSQLite)
setwd("~/Documents/Github/FH_intermediate_R/Week_6")
dir()
knitr::opts_chunk$set(echo = TRUE)
library(RSQLite)
con <- dbConnect(SQLite(), dbname = "toy.lahman.db")
con
dbListTables(con)
dbListFields(con, name = "Batting")
dbListFields(con, name = "Master")
my.query <- "select * from Batting where playerID like '%aaron%';"
dbGetQuery(con,my.query)
my.df <- dbGetQuery(con,my.query)
my.df
my.query <- "select * from Master where playerID like '%aaron%';"
my.df2 <- dbGetQuery(con,my.query)
my.df2
my.df %>% left_join(my.df2, by = "playerID") %>% filter(playerID == "aaronha01")
my.df %>% left_join(my.df2, by = "playerID") %>% filter(playerID == "aaronha01") %>% select(nameFirst, nameLast, HR, RBI)
my.df %>% left_join(my.df2, by = "playerID") %>% filter(playerID == "aaronha01") %>% select(nameFirst, nameLast, HR, RBI) %>% summarize(TotalHR = sum(HR))
my.query <- "select playerID, yearID, HR from Batting where HR >= 50"
hr.50 <- dbGetQuery(con, my.query)
nrow(hr.50)
all.batting <- dbReadTable(con, name = "Batting")
nrow(all.batting)
dbDisconnect(con)
con
library(purrr)
con <- dbConnect(SQLite(), dbname = "toy.lahman.db")
my.query <- "select * from Batting, Master where Batting.playerID = Master.playerID;"
test <- dbGetQuery(con, my.query)
head(my.query)
head(test)
my.query <- "select * from Batting left join Master on Batting.playerID = Master.playerID;"
test2 <- dbGetQuery(con, my.query)
test == test2
my.query <- "select * from Batting inner join Master on Batting.playerID = Master.playerID;"
test == test2
my.query <- "select * from Batting full join Master on Batting.playerID = Master.playerID;"
test == test2
my.query <- "select * from Batting full join Master on Batting.playerID = Master.playerID limit 10;"
test2 <- dbGetQuery(con, my.query)
my.query <- "select * from Batting left join Master on Batting.playerID = Master.playerID limit 10;"
test2 <- dbGetQuery(con, my.query)
test2
dir("../Datasets/")
well.con <- dbConnect(SQLite(), dbname = "../Datasets/well.bone.db")
hint.con <- dbConnect(SQLite(), dbname = "../Datasets/hint.bone.db")
well.hits <- dbGetQuery(well.con, "select * from hits;")
hint.hits <- dbGetQuery(hint.con, "select * from hits;")
well.regions <- dbGetQuery(well.con, "select * from regions;")
hint.regions <- dbGetQuery(hint.con, "select * from regions;")
dbListTables(well.con) # hits, regions
dbListTables(hint.con) # hits, regions
dbListFields(well.con, name = "hits") # Lots of things
dbListFields(well.con, name = "regions") # Fewer things; relates by "loc" column
nrow(hint.regions)
nrow(well.regions)
nrow(hint.hits) #32649
nrow(well.hits) #13240
length(unique(well.hits$name)) #1333
length(unique(hint.hits$name)) #1482
length(intersect(well.hits$name, hint.hits$name)) # 1328
setdiff(well.hits$name, hint.hits$name) # 5 names I don't want to deal with here
length(intersect(well.hits, hint.hits)) # 0
length(intersect(well.regions, hint.regions)) # 0
spec.well <- well.hits %>% left_join(well.regions, by = "loc") %>% filter(start > 25000000, endpos < 30000000)
spec.hint <- hint.hits %>% left_join(hint.regions, by = "loc") %>% filter(start > 25000000, endpos < 30000000)
nrow(spec.well) # 679
nrow(spec.hint) # 2345
my.stats <- bind_rows(spec.well, spec.hint) %>%
select(name, length, method, score1) %>%
group_by(method) %>%
summarise(Unique.motifs = n_distinct(name),
Mean.score = mean(score1),
Med.score = median(score1),
Max.score = max(score1),
Min.score = min(score1),
Mean.length = mean(length),
Med.length = median(length),
Max.length = max(length),
Min.length = min(length)
)
my.stats
bind_rows(spec.well, spec.hint) %>%
ggplot(aes(x = length, y = score1)) + geom_point(aes(col = method))
library(ggplot2)
bind_rows(spec.well, spec.hint) %>%
ggplot(aes(x = length, y = score1)) + geom_point(aes(col = method))
con
dbListTables(con)
dbListFields(con, name = "Batting")
dbListFields(con, name = c("Batting", "Master"))
dbListFields(con, name = "Batting")
my.query <- "select * from Batting limit 10;"
dbGetQuery(con, my.query)
library(BiocInstaller)
biocLite("RSQLite")
?`dbConnect,SQLiteConnection-method`
?dbConnect
dir("../Datasets/")
dbGetQuery(con, "select * from Batting limit 10")
my.query <- "select playerID, yearID from Batting inner join Master on playerID limit 10;"
dbGetQuery(con, my.query)
my.query <- "select playerID, yearID from Batting inner join Master on Batting.playerID=Master.playerID limit 10;"
dbGetQuery(con, my.query)
my.query <- "select Batting.playerID, Batting.yearID from Batting inner join Master on Batting.playerID=Master.playerID limit 10;"
dbGetQuery(con, my.query)
head(well.regions)
head(well.hits)
reg.snip <- head(well.regions.10)
reg.snip <- head(well.regions,10)
reg.snip
left_join(reg.snip, well.hits, by = "loc")
well.sub <- well.hits %>% select(fp_start, fp_end, name)
hint.sub <- hint.hits %>% select(fp_start, fp_end, name)
length(intersect(well.sub, hint.sub)) # 0
well.sub <- well.hits %>% select(fp_start, fp_end)
hint.sub <- hint.hits %>% select(fp_start, fp_end)
length(intersect(well.sub, hint.sub)) # 0
well.sub <- well.hits %>% select(fp_start, fp_end, name)
hint.sub <- hint.hits %>% select(fp_start, fp_end, name)
length(intersect(well.sub, hint.sub)) # 0
length(intersect(well.regions, hint.regions)) # 0
length(dplyr::intersect(well.sub, hint.sub)) # 0
length(dplyr::intersect(well.regions, hint.regions)) # 0
?intersect
