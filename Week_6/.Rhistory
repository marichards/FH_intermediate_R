library(TReNA)
?TReNA
?run.LassoPVSolver
?TReNA
detach("package:TReNA", unload=TRUE)
library(TReNA)
?TReNA
?solve
library(TReNA)
?TReNA
?solve
?solve.TReNA
library(TReNA)
?solve
?TReNA
?TReNA
?TReNA
library(TReNA)
?TReNA
?solve
?`run,BayesSpikeSolver-method`
library(TReNA)
?TReNA
?solve
?solve-methods
library(TReNA)
?solve
library(TReNA)
?TReNA
library(TReNA)
?TReNA
library(TReNA)
?TReNA
?solve
library(TReNA)
?solve
library(TReNA)
?TReNA
?solve
library(TReNA)
?TReNA
?TReNA
?solve
library(TReNA)
?solve
library(TReNA)
?solve
m <- data.frame(word.1 = rep(1:10), word.2 = rep(1:5))
m
m <- data.frame(word.1 = rep(1:10,10), word.2 = rep(1:5,20))
m
head(m)
head(m,21)
library(dplyr)
library(dplyr)
?summarize
?count
?summarize
summarize(m)
summarize(m,count)
?group_by
group_by(m, word.1,word.2)
group_by(m, word.1,word.2,add=TRUE)
?summarize
summarize(group_by(m, word.1))
summarize(m, word.1)
summarize(m, count(word.1))
summarize(m, word.1)
m <- data.frame(word.1 = rep(1:10,10), word.2 = rep(1:5,20),counts = rep(1,100))
head(m)
?ddply
library(plyr)
?ddply
?numcolwise
?aggregate
test <- ddply(m, "word.2",numcolwise(sum))
test
?ddply
test <- ddply(m, c("word.1","word.2"),numcolwise(sum))
test
m <- data.frame(word.1 = rep(1:10,10), word.2 = rep(1:5,20),word.3 = rep(1:2, 50), word.4 = rep(1:20, 5),counts = rep(1,100))
test <- ddply(m, c("word.1","word.2","word.3","word.4"),numcolwise(sum))
head(test)
test
?solve
library(BiocInstaller)
biocLite("ggpubr")
library(ggpubr)
?ttheme
?ggarange
?ggarrange
biocLite("purrr")
biocLite("Lahman")
biocLite("venneuler")
knitr::opts_chunk$set(echo = TRUE)
library(purr)
library(purrr)
reduce(1:10, '*')
library(purrr)
reduce(1:10, *)
library(purrr)
reduce(1:10, `*`)
library(Lahman)
ls()
Lahman
?Lahman
str(Master)
test <- Master
test2 <- Batting
asinh(matrix(1:10, nrow=5))
dir()
blah <- dbConnect(SQLite(), dbname = "toy.lahman.db")
library(DBI)
blah <- dbConnect(SQLite(), dbname = "toy.lahman.db")
library(RSQLite)
blah <- dbConnect(SQLite(), dbname = "toy.lahman.db")
?dbWriteTable
dbWriteTable(blah, "Master",test, overwrite = TRUE)
dbWriteTable(blah, "Batting",test2, overwrite = TRUE)
dbListTables()
dbListTables(blah)
dbDisconnect()
dbDisconnect(blah)
?dbConnect
library(RSQLite)
con <- dbConnect(SQLite(), dbname = "toy.lahman.db")
dbListTables(con)
dir()
setwd("~/Documents/Github/FH_intermediate_R/Week_6")
dbDisconnect(con)
library(RSQLite)
con <- dbConnect(SQLite(), dbname = "toy.lahman.db")
dbListTables(con)
dir()
library(RSQLite)
con <- dbConnect(SQLite(), dbname = "toy.lahman.db")
con
dbListFields()
dbListFields(con)
dbListFields(con, name = "Batting")
dbDisconnect(con)
dbDisconnect(blah)
dbDisconnect(con)
rm(blah)
rm(con)
con <- dbConnect(SQLite(), dbname = "toy.lahman.db")
dbListTables(con)
dbWriteTable(con, "Batting",test2, overwrite = TRUE)
dbListTables(con)
dbWriteTable(con, "Master",test, overwrite = TRUE)
dbListTables(con)
dbDisconnect(con)
con <- dbConnect(SQLite(), dbname = "toy.lahman.db")
dbListTables(con)
dbDisconnect(con)
dir()
library(RSQLite)
con <- dbConnect(SQLite(), dbname = "toy.lahman.db")
dbListTables(con)
dbListFields(con, name = "Batting")
my.query <- "select playerID, yearID from Batting limit 10;"
dbGetQuery(con,my.query)
my.query <- "select playerID, yearID from Batting limit 5;"
dbGetQuery(con,my.query)
my.query <- "select playerID, yearID from Batting limit 5;"
dbGetQuery(con,my.query)
my.query <- "select * from Batting where HR >= 50"
hr.50 <- dbGetQuery(con, my.query)
head(hr.50)
my.query <- "select playerID, yearID, HR from Batting where HR >= 50"
hr.50 <- dbGetQuery(con, my.query)
head(hr.50)
well.con <- dbConnect(SQLite(), dbname = "../Datasets/well.bone.db")
hint.con <- dbConnect(SQLite(), dbname = "../Datasets/hint.bone.db")
well.hits <- dbGetQuery(well.con, "select * from hits;")
hint.hits <- dbGetQuery(hint.con, "select * from hits;")
well.regions <- dbGetQuery(well.con, "select * from regions;")
hint.regions <- dbGetQuery(hint.con, "select * from regions;")
nrow(hint.regions)
nrow(well.regions)
dbListTables(well.con)
dbListTables(hint.con)
nrow(hint.hits)
nrow(well.hits)
length(unique(well.hits$name))
length(unique(hint.hits$name))
length(intersect(well.hits$name, hint.hits$name))
setdiff(well.hits$name, hint.hits$name)
library(dplyr)
length(setequal(well.hits, hint.hits))
length(setequal(well.regions, hint.regions))
length(intersect(well.hits, hint.hits))
length(intersect(well.regions, hint.regions))
head(well.regions)
max(well.regions$start)
min(well.regions$start)
mean(c(56875479,2821727)
)
blah <- filter(well.regions, start > 25000000, end < 30000000)
blah <- filter(well.regions, start > 25000000 & end < 30000000)
blah <- filter(well.regions, start > 25000000, endpos < 30000000)
blah <- well.hits %>% left_join(well.regions, by = "loc") %>% filter(well.regions, start > 25000000, endpos < 30000000)
blah <- well.hits %>% left_join(well.regions, by = "loc") %>% filter(start > 25000000, endpos < 30000000)
spec.well <- well.hits %>% left_join(well.regions, by = "loc") %>% filter(start > 25000000, endpos < 30000000)
spec.hint <- hint.hits %>% left_join(hint.regions, by = "loc") %>% filter(start > 25000000, endpos < 30000000)
head(spec.well)
head(spec.hint)
(head(well.hits))
my.stats <- bind_rows(spec.well, spec.hint) %>%
select(name, length, method, score1) %>%
group_by(method) %>%
summarise(Unique.motifs = n_distinct(name),
Mean.score = mean(score1),
Med.score = median(score1),
Max.score = max(abs(score1)),
Mean.length = mean(length),
Med.length = median(length),
Max.length = max(length),
Min.length = min(length)
)
my.stats
my.stats <- bind_rows(spec.well, spec.hint) %>%
select(name, length, method, score1) %>%
group_by(method) %>%
summarise(Unique.motifs = n_distinct(name),
Mean.score = mean(score1),
Med.score = median(score1),
Max.score = max(score1),
Min.score = min(score1),
Mean.length = mean(length),
Med.length = median(length),
Max.length = max(length),
Min.length = min(length)
)
my.stats
bind_rows(spec.well, spec.hint) %>%
ggplot(aes(x = length, y = score)) + geom_point(col = Method)
bind_rows(spec.well, spec.hint) %>%
ggplot(aes(x = length, y = score)) + geom_point(col = method)
bind_rows(spec.well, spec.hint) %>%
ggplot(aes(x = length, y = score)) + geom_point(aes(col = factor(method)))
bind_rows(spec.well, spec.hint) %>%
ggplot(aes(x = length, y = score1)) + geom_point(aes(col = factor(method)))
bind_rows(spec.well, spec.hint) %>%
ggplot(aes(x = length, y = score1)) + geom_point(aes(col = method))
df1 <- data_frame(x=1:3,y=1:3)
df2 <- data_frame(x=2:4,y=2:4)
df3 <- data_frame(x=3:5,y=3:5)
union(df1,df2)
union(df1,df2,df3)
?union
library(purr)
biocLite("purrr")
reduce(list(df1,df2,df3),union)
reduce(list(df1,df2),union)
nrow(reduce(list(df1,df2),union))
c(1, 2:10)
nrow(reduce(list(df1),union))
biocLite("emo")
devtools::install_github("hadley/emo")
library(emo)
emo::flag("Brazil")
emo::flag("USA")
emo::flag("US")
emo::flag("United States")
emo::flag("United Kingdom")
print(emo::flag("United Kingdom"))
?emo
?flag
flag("New Zealand")
emo::ji("fail")
emo::ji("fail")
emo::ji("poo")
emo::ji("poop")
df1 <- data_frame(x=1:5,y=1:5)
lapply(list(df1,df2),nrow)
)
lapply(list(df1,df2),nrow)
blah <- unlist(lapply(list(df1,df2),nrow))
l <- list(df1,df2)
l[blah]
blah
order(blah)
l[order(blah)]
order(blah)
blah
order(blah, decreasing = TRUE)
my.motif <- subset(query(MotifDb, "MA0001.1"),dataSource == "jaspar2016")
importJaspar <- function(file=myloc) {
vec <- readLines(file)
vec <- gsub("\\[|\\]", "", vec)
start <- grep(">", vec); end <- grep(">", vec) - 1
pos <- data.frame(start=start, end=c(end[-1], length(vec)))
pwm <- sapply(seq(along=pos[,1]), function(x) vec[pos[x,1]:pos[x,2]])
pwm <- sapply(seq(along=pwm), function(x) strsplit(pwm[[x]], " {1,}"))
pwm <- lapply(seq(along=start), function(x) matrix(as.numeric(t(as.data.frame(pwm[(pos[x,1]+1):pos[x,2]]))[,-1]), nrow=4, dimnames=list(c("A", "C", "G", "T"), NULL)))
names(pwm) <- gsub(">", "", vec[start])
return(pwm)
}
blah <- importJaspar("/Users/mrichard/Documents/jaspar_format_testing/new_pfm.txt")
blah <- importJaspar("/Users/mrichard/Documents/jaspar_format_testing/new_pcm.txt")
blah <- importJaspar("/Users/mrichard/Documents/jaspar_format_testing/originalMotif.txt")
blah <- importJaspar("/Users/mrichard/Documents/jaspar_format_testing/new_pcm.txt")
blah <- importJaspar("/Users/mrichard/Documents/jaspar_format_testing/new_pfm.txt")
blah
pwmin <- blah[[1]]
pwmin
class(pwmin)
pwmnorm=t(t(pwmin)/colSums(pwmin))
pwmnorm
ipr=log(pwmnorm)-log(1/4)
ipr
pwmgen=(t(t(pwmin)/colSums(pwmin)))^(0.7)
pwmgen
str=apply(pwmgen,2,function(j){
sample(1:4,nkmer,prob=j,replace=T)
})
??nkmer
?nkmer
pwmgen
nkmer <- 2
str=apply(pwmgen,2,function(j){
sample(1:4,nkmer,prob=j,replace=T)
})
str
scores=rowSums(sapply(1:ncol(str),function(i){
ipr[str[,i],i]
}))
scores
nkmer = 5000000
motifcut = 5
str=apply(pwmgen,2,function(j){
sample(1:4,nkmer,prob=j,replace=T)
})
scores=rowSums(sapply(1:ncol(str),function(i){
ipr[str[,i],i]
}))
#filter by motif match cutoff
passcut= which(scores > motifcut)
print(length(passcut))
basenames=rownames(pwmin)
strs=sapply(passcut,function(i){
paste0(basenames[str[i,]],collapse='')
})
head(strs)
ustrs=unique(strs)
uscores=as.double(scores[passcut][match(ustrs,strs)])
if(match.rc){
ustrs=as.character(reverseComplement(DNAStringSet(ustrs)))
}
match.rc <- F
ustrs=unique(strs)
uscores=as.double(scores[passcut][match(ustrs,strs)])
if(match.rc){
ustrs=as.character(reverseComplement(DNAStringSet(ustrs)))
}
if(length(ustrs)>0){
#calculate chr offsets
chrstr = seqnames(genome)
#find motif matches
pd=PDict(ustrs)
coords.list=lapply(chrstr,function(i){
print(i)
mpd=matchPDict(pd,genome[[i]])
})
coords.pwm=sapply(coords.list,function(i){
ci=countIndex(i)
cid=which(ci>0)
do.call(c,lapply(cid,function(j){
rep(uscores[j],ci[j])
}))
})
allpwm=do.call(c,coords.pwm)
pwmcut2=sort(allpwm,decreasing=T)[min(length(allpwm),maxcand)]
rm(allpwm)
print(pwmcut2)
coords=lapply(1:length(coords.list),function(i){
unlist(coords.list[[i]])[coords.pwm[[i]] > pwmcut2]
})
coords.pwm=lapply(coords.pwm,function(i){i[i>pwmcut2]})
#coords=lapply(coords.list,unlist)
clengths=sapply(coords,length)
coords.short=coords[clengths>0]
names(coords.short)=chrstr[clengths>0]
ncoords=chrstr[clengths>0]#names(coords)
coords2=sapply(coords.short,flank,width=wsize,both=T)
save(coords,coords.pwm,ipr,pwmin,pwmname,ustrs,chrstr,clengths,coords.short,ncoords,coords2,file=paste0(outdir,id,'.pwmout.RData'))
}else{
clengths=0
save(clengths,file=paste0(outdir,id,'.pwmout.RData'))
}
library(GenomicRanges)
allpwm=do.call(c,coords.pwm)
pwmcut2=sort(allpwm,decreasing=T)[min(length(allpwm),maxcand)]
rm(allpwm)
print(pwmcut2)
coords=lapply(1:length(coords.list),function(i){
unlist(coords.list[[i]])[coords.pwm[[i]] > pwmcut2]
})
coords.pwm=lapply(coords.pwm,function(i){i[i>pwmcut2]})
#coords=lapply(coords.list,unlist)
clengths=sapply(coords,length)
coords.short=coords[clengths>0]
names(coords.short)=chrstr[clengths>0]
ncoords=chrstr[clengths>0]#names(coords)
coords2=sapply(coords.short,flank,width=wsize,both=T)
save(coords,coords.pwm,ipr,pwmin,pwmname,ustrs,chrstr,clengths,coords.short,ncoords,coords2,file=paste0(outdir,id,'.pwmout.RData'))
}else{
clengths=0
save(clengths,file=paste0(outdir,id,'.pwmout.RData'))
}
if(length(ustrs)>0){
#calculate chr offsets
chrstr = seqnames(genome)
#find motif matches
pd=PDict(ustrs)
coords.list=lapply(chrstr,function(i){
print(i)
mpd=matchPDict(pd,genome[[i]])
})
coords.pwm=sapply(coords.list,function(i){
ci=countIndex(i)
cid=which(ci>0)
do.call(c,lapply(cid,function(j){
rep(uscores[j],ci[j])
}))
})
allpwm=do.call(c,coords.pwm)
pwmcut2=sort(allpwm,decreasing=T)[min(length(allpwm),maxcand)]
rm(allpwm)
print(pwmcut2)
coords=lapply(1:length(coords.list),function(i){
unlist(coords.list[[i]])[coords.pwm[[i]] > pwmcut2]
})
coords.pwm=lapply(coords.pwm,function(i){i[i>pwmcut2]})
#coords=lapply(coords.list,unlist)
clengths=sapply(coords,length)
coords.short=coords[clengths>0]
names(coords.short)=chrstr[clengths>0]
ncoords=chrstr[clengths>0]#names(coords)
coords2=sapply(coords.short,flank,width=wsize,both=T)
save(coords,coords.pwm,ipr,pwmin,pwmname,ustrs,chrstr,clengths,coords.short,ncoords,coords2,file=paste0(outdir,id,'.pwmout.RData'))
}else{
clengths=0
save(clengths,file=paste0(outdir,id,'.pwmout.RData'))
}
genome
suppressMessages(bis("BSgenome.Hsapiens.UCSC.hg19"))
genome = BSgenome.Hsapiens.UCSC.hg19
library(BSgenome.Hsapiens.UCSC.hg19)
genome = BSgenome.Hsapiens.UCSC.hg19
if(length(ustrs)>0){
#calculate chr offsets
chrstr = seqnames(genome)
#find motif matches
pd=PDict(ustrs)
coords.list=lapply(chrstr,function(i){
print(i)
mpd=matchPDict(pd,genome[[i]])
})
coords.pwm=sapply(coords.list,function(i){
ci=countIndex(i)
cid=which(ci>0)
do.call(c,lapply(cid,function(j){
rep(uscores[j],ci[j])
}))
})
allpwm=do.call(c,coords.pwm)
pwmcut2=sort(allpwm,decreasing=T)[min(length(allpwm),maxcand)]
rm(allpwm)
print(pwmcut2)
coords=lapply(1:length(coords.list),function(i){
unlist(coords.list[[i]])[coords.pwm[[i]] > pwmcut2]
})
coords.pwm=lapply(coords.pwm,function(i){i[i>pwmcut2]})
#coords=lapply(coords.list,unlist)
clengths=sapply(coords,length)
coords.short=coords[clengths>0]
names(coords.short)=chrstr[clengths>0]
ncoords=chrstr[clengths>0]#names(coords)
coords2=sapply(coords.short,flank,width=wsize,both=T)
save(coords,coords.pwm,ipr,pwmin,pwmname,ustrs,chrstr,clengths,coords.short,ncoords,coords2,file=paste0(outdir,id,'.pwmout.RData'))
}else{
clengths=0
save(clengths,file=paste0(outdir,id,'.pwmout.RData'))
}
